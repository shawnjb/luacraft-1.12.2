---@meta
-- Auto-generated LuaCATS documentation
-- Generated by LuaDocGenerator for LuaCraft

---@class mc
mc = {}

---@class LuaEntity
local LuaEntity = {}

---@class LuaPlayer
local LuaPlayer = {}

---@class LuaWorld
local LuaWorld = {}

---@class Vector3
---@field x number @The X coordinate
---@field y number @The Y coordinate
---@field z number @The Z coordinate
Vector3 = {}

---@class LuaMaterial
local LuaMaterial = {}

---@class LuaItemStack
local LuaItemStack = {}

---@class LuaBlock
local LuaBlock = {}

---@class LuaEvent
local LuaEvent = {}

---Broadcasts a message to all players.
---@param message string
function mc.broadcast(message) end

---Executes a server-side command.
---@param command string
function mc.execute(command) end

---Binds a Lua function to a named event.
---@param eventName string
---@param callback function
---@return LuaEvent @The event binding handle
function mc.bindToEvent(eventName, callback) end

---Returns a list of all currently online players.
---@return LuaPlayer[] @The list of players currently online
function mc.getOnlinePlayers() end

---Gets a player by name, or nil if they are not online.
---@param name string
---@return LuaPlayer @The player object, or nil if not found
function mc.getPlayer(name) end

---Returns the current version of LuaCraft.
---@return string @The version string
function mc.getVersion() end

---Returns the LuaJ engine version.
---@return string @The LuaJ version
function mc.getLuaJVersion() end

---Summons an entity at a specific position.
---@param entityId string
---@param pos Vector3
---@return boolean @True if the entity was spawned
function mc.summonEntity(entityId, pos) end

---Creates a LuaItemStack from a registry ID and count.
---@param itemId string
---@param count number
---@return LuaItemStack @The created item stack or nil if invalid
function mc.createItemStack(itemId, count) end

---Returns the entity's internal ID.
---@return number @The entity ID
function LuaEntity:getId() end

---Returns the entity's registry name/type.
---@return string @Entity type name
function LuaEntity:getType() end

---Checks if the entity is a player.
---@return boolean @True if player
function LuaEntity:isPlayer() end

---Instantly kills the entity.
function LuaEntity:kill() end

---Sets the position of the entity.
---@param pos Vector3
function LuaEntity:setPosition(pos) end

---Sets the entity on fire for a specific number of ticks.
---@param ticks number
function LuaEntity:setFireTicks(ticks) end

---Extinguishes fire on the entity.
function LuaEntity:clearFire() end

---Returns the current position of the entity. For players, returns a Vector3; for other entities, returns a table with x, y, and z fields.
---@return Vector3|table @The entity's position
function LuaEntity:getPosition() end

---Gets the current health of the entity. Returns nil if the entity does not have a health attribute.
---@return number|nil @The current health value or nil
function LuaEntity:getHealth() end

---Sets the entity's health to a specified value, if applicable.
---@param health number
function LuaEntity:setHealth(health) end

---Retrieves the maximum health of the entity, if available.
---@return number|nil @The maximum health value or nil
function LuaEntity:getMaxHealth() end

---Heals the entity by the specified amount, if applicable.
---@param amount number
function LuaEntity:heal(amount) end

---Damages the entity by the specified amount, if applicable.
---@param amount number
function LuaEntity:damage(amount) end

---Returns the world in which the entity resides. For player entities, this is the world the player is in.
---@return LuaWorld @The world object where the entity is located
function LuaEntity:getWorld() end

---Returns a vector representing the direction the entity is looking. If the entity is not a living entity, nil is returned.
---@return Vector3|nil @A vector representing the look direction, or nil if not available
function LuaEntity:getLookDirection() end

---Returns the current number of ticks the entity will remain on fire. (Accessed via reflection)
---@return number @The fire ticks, or an error if inaccessible
function LuaEntity:getFireTicks() end

---Returns the name of the player.
---@return string @The player's name
function LuaPlayer:getName() end

---Checks if the player is an operator.
---@return boolean @True if op
function LuaPlayer:isOp() end

---Gets the name of the item held by the player.
---@param hand string|nil
---@return string|nil @Held item name or nil if empty
function LuaPlayer:getHeldItem(hand) end

---Adds an item to the player's inventory.
---@param item string|LuaItemStack
---@return boolean @True if added successfully
function LuaPlayer:addItem(item) end

---Sends a raw JSON-formatted chat message to the player. Accepts either a tellraw array (e.g. '[{"text":"hello"}]') or a fallback string with formatting codes like '§aHello world'. Parses the message and shows it with formatting.
---@param json string
function LuaPlayer:sendTellraw(json) end

---Sends a formatted chat message using a Lua table representing a tellraw-style JSON array. Supports Minecraft 1.12.2 structure including hoverEvent, clickEvent, and formatting like color and bold. Each table entry must be either a plain string (sent directly) or a table with keys like 'text', 'color', 'bold', etc.
---@param parts table
function LuaPlayer:sendTellrawFromTable(parts) end

---Gives an item to the player's inventory using a registry ID. Accepts an optional second argument for the total count to give. If the total count is above 64, the items are split into multiple stacks (clamped between 1 and 256). Returns true if all items were successfully added.
---@param item string
---@param count number|nil
---@return boolean @True if the items were successfully added
function LuaPlayer:giveItem(item, count) end

---Adds a custom-created LuaItemStack to the player's inventory.
---@param itemStack LuaItemStack
---@return boolean @True if the item stack was added successfully
function LuaPlayer:giveItemStack(itemStack) end

---Returns the name of the dimension the player is currently in.
---@return string @The dimension name (e.g., 'overworld')
function LuaPlayer:getDimension() end

---Returns the item currently held in the player's main hand as a LuaItemStack, or nil if the hand is empty.
---@return LuaItemStack|nil @The held item stack or nil
function LuaPlayer:getItemInHand() end

---Returns the item in the player's inventory at the given slot index as a LuaItemStack, or nil if empty.
---@param index number
---@return LuaItemStack|nil @The item in the slot or nil
function LuaPlayer:getInventoryItem(index) end

---Returns the block the player is currently looking at, up to a certain distance.
---@param distance number
---@return LuaBlock? @The block being looked at or nil if none
function LuaPlayer:getTargetBlock(distance) end

---Returns the eye-level position of the player, used for accurate ray tracing or effects.
---@return Vector3 @The position of the player’s eyes
function LuaPlayer:getPositionEyes() end

---Returns the entity's internal ID. (Inherited from LuaEntity)
---@return number @The entity ID
function LuaPlayer:getId() end

---Returns the entity's registry name/type. (Inherited from LuaEntity)
---@return string @Entity type name
function LuaPlayer:getType() end

---Checks if the entity is a player. (Inherited from LuaEntity)
---@return boolean @True if player
function LuaPlayer:isPlayer() end

---Instantly kills the entity. (Inherited from LuaEntity)
function LuaPlayer:kill() end

---Sets the position of the entity. (Inherited from LuaEntity)
---@param pos Vector3
function LuaPlayer:setPosition(pos) end

---Sets the entity on fire for a specific number of ticks. (Inherited from LuaEntity)
---@param ticks number
function LuaPlayer:setFireTicks(ticks) end

---Extinguishes fire on the entity. (Inherited from LuaEntity)
function LuaPlayer:clearFire() end

---Returns the current position of the entity. For players, returns a Vector3; for other entities, returns a table with x, y, and z fields. (Inherited from LuaEntity)
---@return Vector3|table @The entity's position
function LuaPlayer:getPosition() end

---Gets the current health of the entity. Returns nil if the entity does not have a health attribute. (Inherited from LuaEntity)
---@return number|nil @The current health value or nil
function LuaPlayer:getHealth() end

---Sets the entity's health to a specified value, if applicable. (Inherited from LuaEntity)
---@param health number
function LuaPlayer:setHealth(health) end

---Retrieves the maximum health of the entity, if available. (Inherited from LuaEntity)
---@return number|nil @The maximum health value or nil
function LuaPlayer:getMaxHealth() end

---Heals the entity by the specified amount, if applicable. (Inherited from LuaEntity)
---@param amount number
function LuaPlayer:heal(amount) end

---Damages the entity by the specified amount, if applicable. (Inherited from LuaEntity)
---@param amount number
function LuaPlayer:damage(amount) end

---Returns the world in which the entity resides. For player entities, this is the world the player is in. (Inherited from LuaEntity)
---@return LuaWorld @The world object where the entity is located
function LuaPlayer:getWorld() end

---Returns a vector representing the direction the entity is looking. If the entity is not a living entity, nil is returned. (Inherited from LuaEntity)
---@return Vector3|nil @A vector representing the look direction, or nil if not available
function LuaPlayer:getLookDirection() end

---Returns the current number of ticks the entity will remain on fire. (Accessed via reflection) (Inherited from LuaEntity)
---@return number @The fire ticks, or an error if inaccessible
function LuaPlayer:getFireTicks() end

---Gets the current world time.
---@return number @The world time in ticks
function LuaWorld:getTime() end

---Sets the world time relative to the current day. The provided tick value is applied to the current day without affecting the number of days passed.
---@param ticks number
function LuaWorld:setTime(ticks) end

---Sets the world time absolutely.
---@param ticks number
function LuaWorld:setTimeAbsolute(ticks) end

---Sets the world time relative to the current day using a clock format. Expects a string in HH:MM:SS format.
---@param time string
function LuaWorld:setClockTime(time) end

---Sets the world time absolutely using a clock format. Expects a string in HH:MM:SS format.
---@param time string
function LuaWorld:setClockTimeAbsolute(time) end

---Sets the number of days passed while preserving the current time-of-day.
---@param days number
function LuaWorld:setDaysPassed(days) end

---Gets the name of the current dimension.
---@return string @The dimension name (e.g. 'overworld')
function LuaWorld:getDimension() end

---Checks if it is currently raining.
---@return boolean @True if raining
function LuaWorld:isRaining() end

---Sets the rain state of the world.
---@param raining boolean
function LuaWorld:setRaining(raining) end

---Creates an explosion at the given position.
---@param pos Vector3
function LuaWorld:createExplosion(pos) end

---Returns a LuaBlock at the given position.
---@param pos Vector3
---@return LuaBlock @The block at that position
function LuaWorld:getBlockAt(pos) end

---Sets a block at a position using a block ID string.
---@param info table
---@return boolean @True if successful
function LuaWorld:setBlockAt(info) end

---Sets the block at the given LuaBlock position.
---@param info table
---@return boolean @True if successful
function LuaWorld:setBlock(info) end

---Gets the world's default spawn location.
---@return Vector3 @The spawn point as a vector
function LuaWorld:getSpawnPoint() end

---Returns a list of all player entities in the world wrapped as LuaPlayer objects.
---@return LuaPlayer[] @A list of all players in the world
function LuaWorld:getPlayers() end

---Strikes lightning at the given position by summoning a lightning bolt entity. Expects a Vector3 representing the position at which to strike lightning.
---@param pos Vector3
function LuaWorld:strikeLightning(pos) end

---Kills all Ender Dragons in the world by setting their health to 0. Works in all worlds; if none are found, returns false.
---@return boolean @True if any Ender Dragons were defeated, false otherwise
function LuaWorld:defeatEnderDragon() end

---Creates a new 3D vector.
---@param x number
---@param y number
---@param z number
---@return Vector3 @The new vector instance
function Vector3.new(x, y, z) end

---Returns the sum of this vector and another vector.
---@param other Vector3
---@return Vector3 @The result of the addition
function Vector3:add(other) end

---Returns the difference between this vector and another vector.
---@param other Vector3
---@return Vector3 @The result of the subtraction
function Vector3:sub(other) end

---Scales this vector by a factor.
---@param factor number
---@return Vector3 @The scaled vector
function Vector3:scale(factor) end

---Returns the length (magnitude) of the vector.
---@return number @The length of the vector
function Vector3:length() end

---Returns a unit vector (normalized version).
---@return Vector3 @The normalized vector
function Vector3:normalize() end

---Returns the Euclidean distance to another vector.
---@param other Vector3
---@return number @The distance between the vectors
function Vector3:distanceTo(other) end

---Returns an integer table for block position rounding down x/y/z.
---@return table @A table with integer x, y, z
function Vector3:toBlockPos() end

---Returns the material name (fallback via toString).
---@return string @Material name
function LuaMaterial:getName() end

---Returns true if the material is a liquid.
---@return boolean
function LuaMaterial:isLiquid() end

---Returns true if the material is solid.
---@return boolean
function LuaMaterial:isSolid() end

---Returns true if the material can be replaced (e.g. tall grass, fluids).
---@return boolean
function LuaMaterial:isReplaceable() end

---Returns the registry ID of the item.
---@return string @e.g., 'minecraft:stone'
function LuaItemStack:getItemId() end

---Returns the number of items in the stack.
---@return number @The stack count
function LuaItemStack:getCount() end

---Sets the number of items in the stack.
---@param count number
function LuaItemStack:setCount(count) end

---Returns true if the item stack is empty.
---@return boolean
function LuaItemStack:isEmpty() end

---Gets the current damage value (durability) of the item.
---@return number @The damage value
function LuaItemStack:getDamage() end

---Sets the damage value (durability) of the item.
---@param damage number
function LuaItemStack:setDamage(damage) end

---Returns the display name of the item.
---@return string @The item display name
function LuaItemStack:getDisplayName() end

---Sets the username displayed on a player head item.
---@param name string
---@return boolean @True if successful
function LuaItemStack:setUsername(name) end

---Adds an enchantment to the item stack using the given registry ID and level.
---@param enchantId string
---@param level number
---@return boolean @True if the enchantment was added
function LuaItemStack:addEnchantment(enchantId, level) end

---Modifies the level of an existing enchantment on the item stack.
---@param enchantId string
---@param newLevel number
---@return boolean @True if the enchantment was modified
function LuaItemStack:modifyEnchantment(enchantId, newLevel) end

---Removes the enchantment identified by the given registry ID from the item stack.
---@param enchantId string
---@return boolean @True if the enchantment was removed
function LuaItemStack:removeEnchantment(enchantId) end

---Sets the display name of the item. The name is stored in the item's display tag.
---@param name string
function LuaItemStack:setDisplayName(name) end

---Sets the lore for the item. Expects a table of strings, where each string is a lore line.
---@param lore table
function LuaItemStack:setLore(lore) end

---Sets the content of a written book. Expects a table with 'title', 'author', and 'pages' keys. The 'pages' key should be a table of strings, each representing a page's text.
---@param bookInfo table
---@return boolean @True if the book content was successfully set
function LuaItemStack:setBookContent(bookInfo) end

---Returns the quantity of items in the stack (same as getCount).
---@return number @The stack amount
function LuaItemStack:getAmount() end

---Returns the block material type of the item, if applicable.
---@return LuaMaterial|nil @The item's material, or nil if not applicable
function LuaItemStack:getMaterial() end

---Returns the registry ID of the item as a string (e.g., 'minecraft:stone'). This mirrors the behavior of getType() from LuaCraftBeta.
---@return string @The registry ID of the item
function LuaItemStack:getType() end

---Returns the position of the block as a Vector3.
---@return Vector3 @Block position
function LuaBlock:getPosition() end

---Gets the registry name of the block type.
---@return string @Block ID (e.g., 'minecraft:stone')
function LuaBlock:getType() end

---Gets the material of the block.
---@return LuaMaterial @The block's material
function LuaBlock:getMaterial() end

---Returns true if the block is air.
---@return boolean
function LuaBlock:isAir() end

---Returns true if the block's material is solid.
---@return boolean
function LuaBlock:isSolid() end

---Stops the event listener from receiving further events.
function LuaEvent:disconnect() end

---Pauses script execution for the given number of seconds.
---@param seconds number
function wait(seconds) end

---Pauses script execution for the given number of ticks (1 tick = 50 ms).
---@param ticks number
function waitTicks(ticks) end

---@type LuaPlayer
sender = nil

