---@meta
-- Auto-generated LuaCATS documentation
-- Generated by LuaDocGenerator for LuaCraft

---@class mc
mc = {}

---@class LuaPlayer
local LuaPlayer = {}

---@class LuaWorld
local LuaWorld = {}

---@class Vector3
Vector3 = {}

---@class LuaMaterial
local LuaMaterial = {}

---@class LuaItemStack
local LuaItemStack = {}

---@class LuaEntity
local LuaEntity = {}

---@class LuaBlock
local LuaBlock = {}

---@class LuaEvent
local LuaEvent = {}

---Broadcasts a message to all players.
---@param message string
function mc.broadcast(message) end

---Executes a server-side command.
---@param command string
function mc.execute(command) end

---Binds a Lua function to a named event.
---@param eventName string
---@param callback function
---@return LuaEvent @The event binding handle
function mc.bindToEvent(eventName, callback) end

---Gets the command sender for a player by name.
---@param playerName string
---@return LuaCommandSender @The command sender object for the player, or nil if not found
function mc.getCommandSender(playerName) end

---Returns the name of the player.
---@return string @The player's name
function LuaPlayer:getName() end

---Gets the player's current health.
---@return number @Current health value
function LuaPlayer:getHealth() end

---Sets the player's health.
---@param health number
function LuaPlayer:setHealth(health) end

---Checks if the player is an operator.
---@return boolean @True if the player is op
function LuaPlayer:isOp() end

---Sets the player on fire for a specific number of ticks.
---@param ticks number
function LuaPlayer:setFireTicks(ticks) end

---Gets the player's maximum health.
---@return number @The max health value
function LuaPlayer:getMaxHealth() end

---Heals the player by the given amount.
---@param amount number
function LuaPlayer:heal(amount) end

---Damages the player by the given amount.
---@param amount number
function LuaPlayer:damage(amount) end

---Kills the player instantly.
function LuaPlayer:kill() end

---Gets the name of the item held by the player.
---@param hand string|nil
---@return string|nil @Name of the held item or nil if empty
function LuaPlayer:getHeldItem(hand) end

---Adds an item to the player's inventory by name.
---@param itemName string
---@return boolean @True if added successfully
function LuaPlayer:addItem(itemName) end

---Gets the current world time.
---@return number @The world time in ticks
function LuaWorld:getTime() end

---Sets the world time.
---@param ticks number
function LuaWorld:setTime(ticks) end

---Gets the name of the current dimension.
---@return string @The dimension name (e.g. 'overworld')
function LuaWorld:getDimension() end

---Checks if it is currently raining.
---@return boolean @True if raining
function LuaWorld:isRaining() end

---Sets the rain state of the world.
---@param raining boolean
function LuaWorld:setRaining(raining) end

---Creates an explosion at the given position.
---@param pos table
function LuaWorld:createExplosion(pos) end

---Returns a LuaBlock at the given position.
---@param pos Vector3
---@return LuaBlock @The block at that position
function LuaWorld:getBlockAt(pos) end

---Sets a block at a position using a block ID string.
---@param info table
---@return boolean @True if successful
function LuaWorld:setBlockAt(info) end

---Sets the block at the given LuaBlock position.
---@param info table
---@return boolean @True if successful
function LuaWorld:setBlock(info) end

---Creates a new 3D vector.
---@param x number
---@param y number
---@param z number
---@return Vector3 @The new vector instance
function Vector3.new(x, y, z) end

---Returns the sum of this vector and another vector.
---@param other Vector3
---@return Vector3 @The result of the addition
function Vector3:add(other) end

---Returns the difference between this vector and another vector.
---@param other Vector3
---@return Vector3 @The result of the subtraction
function Vector3:sub(other) end

---Scales this vector by a factor.
---@param factor number
---@return Vector3 @The scaled vector
function Vector3:scale(factor) end

---Returns the length (magnitude) of the vector.
---@return number @The length of the vector
function Vector3:length() end

---Returns a unit vector (normalized version).
---@return Vector3 @The normalized vector
function Vector3:normalize() end

---Returns the material name (fallback via toString).
---@return string @Material name
function LuaMaterial:getName() end

---Returns true if the material is a liquid.
---@return boolean
function LuaMaterial:isLiquid() end

---Returns true if the material is solid.
---@return boolean
function LuaMaterial:isSolid() end

---Returns true if the material can be replaced (e.g. tall grass, fluids).
---@return boolean
function LuaMaterial:isReplaceable() end

---Returns the registry ID of the item.
---@return string @e.g., 'minecraft:stone'
function LuaItemStack:getItemId() end

---Returns the number of items in the stack.
---@return number @The stack count
function LuaItemStack:getCount() end

---Sets the number of items in the stack.
---@param count number
function LuaItemStack:setCount(count) end

---Returns true if the item stack is empty.
---@return boolean
function LuaItemStack:isEmpty() end

---Returns the entity's internal ID.
---@return number @The entity ID
function LuaEntity:getId() end

---Returns the entity's registry name/type.
---@return string @Entity type name (e.g., 'Zombie')
function LuaEntity:getType() end

---Returns the entity's current block position.
---@return table @Table with x, y, z fields
function LuaEntity:getPosition() end

---Checks if the entity is a player.
---@return boolean @True if the entity is a player
function LuaEntity:isPlayer() end

---Instantly kills the entity.
function LuaEntity:kill() end

---Returns the position of the block as a Vector3.
---@return Vector3 @Block position
function LuaBlock:getPosition() end

---Gets the registry name of the block type.
---@return string @Block ID (e.g., 'minecraft:stone')
function LuaBlock:getType() end

---Gets the material of the block.
---@return LuaMaterial @The block's material
function LuaBlock:getMaterial() end

---Returns true if the block is air.
---@return boolean
function LuaBlock:isAir() end

---Returns true if the block's material is solid.
---@return boolean
function LuaBlock:isSolid() end

---Stops the event listener from receiving further events.
function LuaEvent:disconnect() end

